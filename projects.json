{
  "projects": [
    {
      "name": "RATings",
      "tech": "Ruby on Rails, Angular",
      "blurb": "San Francisco restaurant cleanliness scores.",
      "description": "RATings (pronounced RAT-ings) uses data from the city of San Francisco's health department to display an interactive map of restaurants in the city and their food safety inspection scores. Businesses are given a score of zero to four rats depending on the severity of their violations.  Historical scores and violations are provided as well as the status of the violations. The backend uses Rails to expose a simple API that feeds an Angular js front-end. This project was undertaken chiefly as an exercise in learning Angular js; as well as to explore public data in a novel way.",
      "uri": "http://ratings.availableforfriendship.com",
      "repo": "https://github.com/el-mapache/caveat",
      "file": "rats.jpg",
      "available": "yes"
    },
    {
      "name": "Libre Ipsum",
      "tech": "Sinatra, jQuery",
      "blurb": "Placeholder text from Project Gutenberg.",
      "description": "Libre Ipsum is a placeholder text generator that pulls its material from Project Gutenberg, an online repository of books in the public domain. It fetches and parses a daily RSS feed that contains the latest books added to Project Gutenberg. The requesting user chooses a book and a number of paragraphs to served; sections of the book are chosen at random. The backend is comprised of several pieces: a small Sinatra application to handle requests and process the books, a Redis database for simple IP based request throttling, and a text file which serves as a manifest of all available books. The front-end is quite basic and realized with jQuery.",
      "uri": "http://libre-ipsum.availableforfriendship.com",
      "repo": "https://github.com/el-mapache/libre-ipsum",
      "file": "libre.jpg",
      "available": "yes"
    },
    {
      "name": "Encoder",
      "tech": "Express, Angular",
      "blurb": "ffmpeg backed audio transcoder.",
      "description": "Encoder is an audio transcoder that allows users to upload an audio file and convert it to one of several different formats. The file is processed using ffmpeg and an email is sent to the user with a link to the converted file. It uses Redis and a queueing library to manage file conversion and email jobs. This application was recently rewritten in Express from pure Node, with Angular providing the front-end functionality. This is the first web application I'd ever created, and it is quite special to me.",
      "uri": "",
      "repo": "https://github.com/el-mapache/encode",
      "file": "encoder.jpg",
      "available": "no"
    },
    {
      "name": "Transmission",
      "tech": "Express, Backbone",
      "blurb": "Real-time file streaming between multiple peers.",
      "description": "Using Node's binary websocket library BinaryJS, this application allows for real-time file streaming from one connected client to each of the other connected clients. It chunks a file to the back-end server, and pipes the chunks to each client connection. There the files assembled and saved to the user's computer. Files are not stored on the server. The front-end is a small backbone application that utilizes the File API to recreate files from the original chunks of data. When I discovered the BinaryJS the idea for this project came to me almost immediately.",
      "uri": "",
      "repo": "https://github.com/el-mapache/transmission",
      "file": "transmission.jpg",
      "available": "no"
    },
    {
      "name": "SC-Now Recorder",
      "tech": "Angular",
      "blurb": "Record module for Source-Now web audio app.",
      "description": "Recorder module written for Source-Elements' web only audio communication tool. Based on Matt Diamond's excellent RecorderJS library, this module makes a number of modifications to allow audio files of any duration to be recorded and saved without consuming all of the user's system resources. Originally written as a stand-alone demo, I adapted it into an Angular application for use with Source-Elements' existing front-end infrastructure.",
      "uri": "https://source-now.com",
      "repo": "https://github.com/el-mapache/cassette",
      "file": "scnow.jpg",
      "available": "yes"
    },
    {
      "name": "Hero Quest",
      "tech": "CraftyJS",
      "blurb": "Milton Bradley's 90s Board Game in Javascript.",
      "description": "A perpetual work in progress, this is a JavaScript implementation of one of my favorite boardgames as a kid. I wanted the experience of making a game, and the challenge of designing large system composed of many smaller components.Character actions are added dynamically in the form of interfaces which wrap several components together, and a simple MVC structure glues toghther the user interface and the data models. This game includes implementations of A*, ray casting, and floodfill algorithms, generally adapted from Java or C to JavaScript.",
      "uri": "",
      "repo": "https://github.com/el-mapache/hero_quest",
      "file": "hero.jpg",
      "available": "yes"
    }
  ]
}
